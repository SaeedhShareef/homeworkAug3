{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","components/hoc/rainbow.js","components/Contact.js","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","withRouter","props","console","log","className","to","Home","state","posts","axios","get","then","res","setState","data","slice","this","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","match","params","post_id","App","exact","path","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,0LCqB5BC,eAnBA,SAACC,GAKZ,OAJAC,QAAQC,IAAIF,GAKR,yBAAKG,UAAU,4BACvB,yBAAKA,UAAU,aACX,uBAAIA,UAAU,cAAd,eACA,wBAAIA,UAAU,SACV,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,UAAZ,UACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,kB,kCCgCGC,E,4MAxCXC,MAAQ,CACJC,MAAO,I,kEAEU,IAAD,OACZC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACFV,QAAQC,IAAI,OACZ,EAAKU,SAAS,CACVL,MAAOI,EAAIE,KAAKC,MAAM,EAAE,W,+BAK1B,IACCP,EAASQ,KAAKT,MAAdC,MACDS,EAAWT,EAAMU,OACnBV,EAAMW,KAAI,SAAAC,GACN,OACI,yBAAKhB,UAAU,YAAYiB,IAAKD,EAAKE,IACjC,yBAAKC,IAAKC,IAAUC,IAAI,eACxB,yBAAKrB,UAAU,gBACd,kBAAC,IAAD,CAAMC,GAAI,IAAMe,EAAKE,IACpB,0BAAMlB,UAAU,uBAAuBgB,EAAKM,QAE1C,2BAAIN,EAAKO,WAMzB,yBAAKvB,UAAU,UAAf,gBAEZ,OACI,yBAAKA,UAAU,aACZ,wBAAIA,UAAU,UAAd,QACCa,O,GApCOW,aCMJC,ECTC,SAACC,GAEb,IAEE1B,EAFa,CAAC,MAAO,SAAU,SAAU,QAAS,OAAQ,SAAU,UAC3C2B,KAAKC,MAAsB,EAAhBD,KAAKE,WACf,QAEhC,OAAO,SAAChC,GACJ,OACI,yBAAKG,UAAWA,GACZ,kBAAC0B,EAAqB7B,KDAnB4B,EARD,WACV,OACI,yBAAKzB,UAAU,aACZ,wBAAIA,UAAU,UAAd,SACA,2MEMI8B,EAXC,SAACjC,GAIb,OACI,yBAAKG,UAAU,aACZ,wBAAIA,UAAU,UAAd,WACA,yMC8BI+B,E,4MAnCX5B,MAAQ,CACJe,GAAI,KACJF,KAAM,M,kEAEU,IAAD,OAEXE,EAAIN,KAAKf,MAAMmC,MAAMC,OAAOC,QAChC7B,IAAMC,IAAI,8CAA+CY,GACxDX,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVO,KAAMR,EAAIE,UAGlBE,KAAKH,SAAS,CACVS,GAAKA,M,+BAKT,IAAMF,EAAOJ,KAAKT,MAAMa,KACpB,yBAAKhB,UAAU,QACX,wBAAIA,UAAU,UAAUY,KAAKT,MAAMa,KAAKM,OACxC,2BAAIV,KAAKT,MAAMa,KAAKO,OAGxB,yBAAKvB,UAAU,UAAf,mBAEI,OACI,yBAAKA,UAAU,aACVgB,O,GA9BNQ,aCyBJW,E,uKAjBX,OACE,kBAAC,IAAD,KACA,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWR,IAClC,kBAAC,IAAD,CAAOO,KAAK,YAAYC,UAAWP,W,GAV3BP,aCGEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.117d5a9c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react'\r\nimport {Link, NavLink, withRouter} from 'react-router-dom'\r\nconst Navbar = (props) => {\r\n    console.log(props)\r\n    //  setTimeout(() => {\r\n    //      props.history.push('/about')\r\n    //  }, 2000)\r\n    return (\r\n        <nav className=\"nav-wrapper red darken-3\">\r\n<div className=\"container\">\r\n    <a  className=\"brand-logo\">Poke' Times</a>\r\n    <ul className=\"right\">\r\n        <li><Link to=\"/\">Home</Link></li>\r\n        <li><NavLink to=\"/About\">About</NavLink></li>\r\n        <li><NavLink to=\"/Contact\">Contact</NavLink></li>\r\n                  </ul>\r\n             </div>\r\n          </nav>\r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, { Component} from 'react' \r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\nimport Pokeball from '../pokeball.png'\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        posts: [ ]\r\n    }\r\n    componentDidMount() {\r\n            axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(res => {\r\n                console.log('res')\r\n                this.setState({\r\n                    posts: res.data.slice(0,10)\r\n                })\r\n            })\r\n    }\r\n\r\n        render() {\r\n            const {posts} = this.state;\r\n            const postList = posts.length ? (\r\n                posts.map(post => {\r\n                    return(\r\n                        <div className=\"post card\" key={post.id}>\r\n                            <img src={Pokeball} alt=\"A Pokeball\"/>\r\n                            <div className=\"card-content\">\r\n                             <Link to={'/' + post.id}> \r\n                              <span className=\"card-title red-text\">{post.title}</span>\r\n                              </Link> \r\n                                <p>{post.body}</p>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            ) : (\r\n                <div className=\"center\">No posts yet</div>\r\n            )\r\n    return (\r\n        <div className=\"container\">\r\n           <h4 className=\"center\">Home</h4>\r\n           {postList}\r\n        </div>\r\n    )\r\n    }\r\n}\r\nexport default Home","import React from 'react' \r\nimport Rainbow from './hoc/rainbow'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"container\">\r\n           <h4 className=\"center\">About</h4>\r\n           <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quidem ducimus quia modi earum, nam nisi autem. Et dolorum praesentium nobis dignissimos corrupti cum nemo ut!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Rainbow(About)","import React from 'react'\r\n\r\nconst Rainbow = (WrappedComponent) => {\r\n\r\n    const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\r\n    const randomColor = colors[Math.floor(Math.random() * 5)];\r\nconst className = randomColor + '-text';\r\n\r\nreturn (props) => {\r\n    return (\r\n        <div className={className}>\r\n            <WrappedComponent {...props} />\r\n        </div>\r\n    )\r\n}\r\n    \r\n}\r\n\r\nexport default Rainbow","import React from 'react' \r\n\r\nconst Contact = (props) => {\r\n    // setTimeout(() => {\r\n    //     props.history.push('/about')\r\n    // }, 2000);\r\n    return (\r\n        <div className=\"container\">\r\n           <h4 className=\"center\">Contact</h4>\r\n           <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Quidem ducimus quia modi earum, nam nisi autem. Et dolorum praesentium nobis dignissimos corrupti cum nemo ut!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Contact","import React, { Component} from 'react'\r\nimport axios from 'axios'\r\n\r\nclass Post extends Component {\r\n    state = {\r\n        id: null, \r\n        post: null\r\n    }\r\n    componentDidMount(){\r\n        \r\n        let id= this.props.match.params.post_id;\r\n        axios.get('https://jsonplaceholder.typicode.com/posts/' +id)\r\n        .then(res => {\r\n            this.setState({\r\n                post: res.data\r\n            })\r\n          })\r\n        this.setState({\r\n            id : id\r\n        })\r\n    }\r\n    render() {\r\n\r\n        const post = this.state.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{this.state.post.title}</h4>\r\n                <p>{this.state.post.body}</p>   \r\n                 </div>\r\n        ) : (\r\n            <div className=\"center\">Loading post...</div>\r\n        )\r\n                return(\r\n                    <div className=\"container\">\r\n                        {post}\r\n                    </div>  \r\n                )\r\n    }\r\n}\r\n\r\nexport default Post","import React, {Component} from 'react';\nimport Navbar from './components/Navbar'\nimport { BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport Post from './components/post'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/About' component={About} />\n          <Route path='/Contact' component={Contact} />\n          <Route path=\"/:post_id\" component={Post} />\n          </Switch>\n            </div>\n      </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}